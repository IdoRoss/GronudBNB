@model GroundBNB.Models.Apartment

@{
    ViewData["Title"] = "Details";
    int count = 1;
}

<h1>Details</h1>
<script>
    window.main = @Html.Raw(JsonSerializer.Serialize(Model));
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js"></script>
<div>
    <h4>Apartment</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.NumOfRooms)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.NumOfRooms)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PricePerDay)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PricePerDay)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.City)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.City)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Street)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Street)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Floor)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Floor)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ApartmentNumber)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ApartmentNumber)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.MaxNumOfGuests)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.MaxNumOfGuests)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ApartmentOwner)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ApartmentOwner.Email)
        </dd>
        <dt class="col-sm-2">
            Reviews
        </dt>
        <dd class="col-sm-10">
            <table class="table">
                <tr>
                    <th>#</th>
                    <th>Review</th>
                    <th>Rating</th>
                </tr>

                @foreach (var item in Model.Reservations)
                {
                    if (item.Rating == null && item.Review == null)
                        continue;
                    <tr>
                        <td>@Html.DisplayFor(model => count)</td>
                        <td>
                            @if (!String.IsNullOrEmpty(item.Review))
                            {
                                @*<p>@item.Review</p>*@
                                @Html.DisplayFor(modeItem => item.Review)
                            }
                            else
                            {
                                <p>No Review Submited</p>
                            }

                        </td>
                        <td>
                            @Html.DisplayFor(modeItem => item.Rating)
                        </td>
                    </tr>
                    count++;
                }
            </table>
        </dd>
    </dl>
</div>
<div>
    <style>
        #map {
            height: 400px;
            width: 400px;
        }
    </style>
    <div id="map">
    </div>
    <!--The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-app.js">
    </script>
    <!--TODO: Add SDKs for Firebase products that you want to use
         https://firebase.google.com/docs/web/setup#available-libraries -->
    <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-analytics.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-remote-config.js"></script>

    <script>
        // Your web app's Firebase configuration
        // For Firebase JS SDK v7.20.0 and later, measurementId is optional
        var firebaseConfig = {
            apiKey: "AIzaSyB_-wogOV_Nlx16tl6bebvw-uqNpe38CRk",
            authDomain: "groundbnb-308a5.firebaseapp.com",
            projectId: "groundbnb-308a5",
            storageBucket: "groundbnb-308a5.appspot.com",
            messagingSenderId: "671434416272",
            appId: "1:671434416272:web:d9d1ef9710dbf2aa98b815",
            measurementId: "G-C0QWDTRD28"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        firebase.analytics();

    </script>
    <script>
        // Loading API Key for Google Maps API from remote config
        const remoteConfig = firebase.remoteConfig();
        remoteConfig.settings.minimumFetchIntervalMillis = 3600000;
        remoteConfig.fetchAndActivate()
            .then(() => {
                window.apiKey = remoteConfig.getString("GoogleMapsAPIKey");
                let script = document.createElement('script');
                script.src = 'https://maps.googleapis.com/maps/api/js?key=' + remoteConfig.getString("GoogleMapsAPIKey") +
                    '&callback=initMap&libraries=places';
                script.async = true;
                document.body.appendChild(script);
            }).catch((err) => {
                console.error(err);
            });
    </script>
    <script>
        function initMap() {
            var address = '@Model.City' + '+' + '@Model.Street';
            var lat, lng, latlang;
            address.replace(" ", "+");
            var url = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + address + '&key=' + window.apiKey;
            $.getJSON(url, function(data) {
                lat = data['results'][0]["geometry"]["location"]["lat"];
                lng = data['results'][0]["geometry"]["location"]["lng"];
                latlang = new google.maps.LatLng(lat, lng)
                const options = {
                    zoom: 13,
                    center: latlang
                };
                var map = new google.maps.Map(document.getElementById('map'), options);
                var marker = new google.maps.Marker({
                    position: latlang,
                    map: map
                });
            });
        }
    </script>
</div>
<section class="metadata">
    <div class="title">
        <h2>
            Apartments Views
        </h2>
    </div>
    <div class="bar-stats">
        <canvas id="myChart" width="640" height="150">
        </canvas>

        <script>
var ctx = document.getElementById('myChart').getContext('2d');

        var mainData = @Html.Raw(JsonSerializer.Serialize(Model.ApartmentsViews));
        var data = [
          ...mainData.map(x => ({ ...x, Date: x.Date.split("T")[0] }))
        ];

var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: data.map(d => d.Date),
        datasets: [{
            label: '# of Views',
            data: data.map(d => d.Views),
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
        @* 'rgba(54, 162, 235, 0.2)',
        'rgba(255, 206, 86, 0.2)',
        'rgba(75, 192, 192, 0.2)',
        'rgba(153, 102, 255, 0.2)',
        'rgba(255, 159, 64, 0.2)' @
    ],
    borderColor: [
        'rgba(255, 99, 132, 1)',
        @ 'rgba(54, 162, 235, 1)',
        'rgba(255, 206, 86, 1)',
        'rgba(75, 192, 192, 1)',
        'rgba(153, 102, 255, 1)',
        'rgba(255, 159, 64, 1)' *@
],
borderWidth: 1
}]
},
options:
{
scales:
            {
y:
                {
beginAtZero: true
}
}
}
});
        </script>

    </div>
</section>

<div>
    <a asp-action="Edit" asp-route-id="@Model.ID">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
